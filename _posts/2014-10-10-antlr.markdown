---
layout: post
title: 使用 Antlr 开发领域语言(DSL)
category: 笔迹
tags: Aloha
description: Antlr DSL

---

![](https://raw.githubusercontent.com/Ashtray/Ashtray.github.io/master/imag/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E4%B8%87%E5%B2%81.png)  

###Antlr 简介
  
ANTLR 语言识别的一个工具 (ANother Tool for Language Recognition ) 是一种语言工具，它提供了一个框架，可以通过包含 Java, C++, 或 C# 动作（action）的语法描述来构造语言识别器，编译器和解释器。   

 <!-- more -->

-----------

计算机语言的解析已经变成了一种非常普遍的工作，在这方面的理论和工具经过近 40 年的发展已经相当成熟，使用 Antlr 等识别工具来识别，解析，构造编译器比手工编程更加容易，同时开发的程序也更易于维护。  
语言识别的工具有很多种，比如大名鼎鼎的 Lex 和 YACC，Linux 中有他们的开源版本，分别是 Flex 和 Bison。在 Java 社区里，除了 Antlr 外，语言识别工具还有 JavaCC 和 SableCC 等。
  
>和大多数语言识别工具一样，Antlr 使用上下文无关文法描述语言。最新的 Antlr 是一个基于 LL(*) 的语言识别器。在 Antlr 中通过解析用户自定义的上下文无关文法，自动生成词法分析器 (Lexer)、语法分析器 (Parser) 和树分析器 (Tree Parser)。  

------

###Antlr 能做什么


	编程语言处理  

识别和处理编程语言是 Antlr 的首要任务，编程语言的处理是一项繁重复杂的任务，为了简化处理，一般的编译技术都将语言处理工作分为前端和后端两个部分。其中前端包括词法分析、语法分析、语义分析、中间代码生成等若干步骤，后端包括目标代码生成和代码优化等步骤。  

Antlr 致力于解决编译前端的所有工作。使用 Anltr 的语法可以定义目标语言的词法记号和语法规则，Antlr 自动生成目标语言的词法分析器和语法分析器；此外，如果在语法规则中指定抽象语法树的规则，在生成语法分析器的同时，Antlr 还能够生成抽象语法树；最终使用树分析器遍历抽象语法树，完成语义分析和中间代码生成。整个工作在 Anltr 强大的支持下，将变得非常轻松和愉快。  

	文本处理  

当需要文本处理时，首先想到的是正则表达式，使用 Anltr 的词法分析器生成器，可以很容易的完成正则表达式能够完成的所有工作；除此之外使用 Anltr 还可以完成一些正则表达式难以完成的工作，比如识别左括号和右括号的成对匹配等。  

	Antlr 的安装  

----

Antlr 本身是使用 Java 开发的，在使用 Antlr 之前必须先安装 JRE(Java Runtime Environment )。Antlr 需要 Java 1.4 或者 1.4 以上版本。  

LINUX下的安装  

	$ cd /usr/local/lib  
	$ wget http://antlr.org/download/antlr-4.4-complete.jar  
	$ export CLASSPATH=".:/usr/local/lib/antlr-4.4-complete.jar:$CLASSPATH"  
	$ alias antlr4='java -jar /usr/local/lib/antlr-4.4-complete.jar'  
	$ alias grun='java org.antlr.v4.runtime.misc.TestRig'  
 
------------

小例子  匹配多项式  

	grammar Expr;		
	prog:	(expr NEWLINE)* ;  
	expr:	expr ('*'|'/') expr  
 	   |	expr ('+'|'-') expr  
 	   |	INT  
  	   |	'(' expr ')'   
 	   ;  
	NEWLINE : [\r\n]+ ;  
	INT     : [0-9]+ ;  

保存为 `Expr.g`文件   放到`cd /usr/local/lib`  
当然要提前改变`lib`文件夹的读写权限  
暴力的  `chmod 777 /usr/local/lib`  
然后  `cd /usr/local/lib`  
执行命令：  

	$ antlr4 Expr.g  
	$ javac Expr*.java  
	$ grun Expr prog -gui  
	100+2*34  
	^D  

最后一行是 `Ctrl+D`表示表达式输入结束  
如果没问题的话  应该会弹出语法树  

![](http://www.tu265.com/di-839fe4aa14ff1531eb1d739f200fcecf.png)  

###表达式定义

	文法定义  

我们定义一个最简单的领域语言，从一个简单的完成算术运算的例子出发，详细说明 Antlr 的使用。首先我们需要创建一个 Antlr 的文法文件， 一般以 .g 为文件名后缀，命名为 Expr.g 。  

在这个文法文件中根据 Antlr 的语法规则来定义算术表达式的文法，文件的头部是 grammar 关键字，定义文法的名字：  

	grammar Expr;   
 

为了简单起见，假设我们的自定义语言只能输入一个算术表达式。从而整个程序有一个语句构成，语句有表达式或者换行符构成。如清单 1 所示：  


清单 1 程序和语句  

				 
	prog: stat   
 	;   

	stat: expr   
		  |NEWLINE   
	 ;   
 

在 Anltr 中，算法的优先级需要通过文法规则的嵌套定义来体现，加减法的优先级低于乘除法，表达式 expr 的定义由乘除法表达式 multExpr 和加减法算符 `('+'|'-') `构成；同理，括号的优先级高于乘除法，乘除法表达式 multExpr 通过原子操作数 atom 和乘除法算符 `('*'|'/') `构成。整个表达的定义如清单 2 所示：  


清单 2 表达式  

				 
	Expr : multExpr (('+'|'-') multExpr)*   
 	;   

	multExpr : atom (('*'|'/') atom)*   
	;   

	atom:  '(' expr ')'   
		| INT  
		| ID  
	;   
 

最后需要考虑的词法的定义，在 Antlr 中语法定义和词法定义通过规则的第一个字符来区别， 规定语法定义符号的第一个字母小写，而词法定义符号的第一个字母大写。算术表达式中用到了 4 类记号 ( 在 Antlr 中被称为 Token)，分别是标识符 ID，表示一个变量；常量 INT，表示一个常数；换行符 NEWLINE 和空格 WS，空格字符在语言处理时将被跳过，skip() 是词法分析器类的一个方法。如清单 3 所示：  


清单 3 记号定义  

				 
	ID : ('a'..'z' |'A'..'Z')+ ;   
	INT : '0'..'9' + ;   
	NEWLINE:'\r' ? '\n' ;   
	WS : (' ' |'\t' |'\n' |'\r' )+ {skip();} ;   
 

Antlr 支持多种目标语言，可以把生成的分析器生成为 `Java，C#，C，Python`，JavaScript 等多种语言，默认目标语言为 Java，通过 `options {language=?;}` 来改变目标语言。我们的例子中目标语言为 Java。  

下载Antlr最新版  
也是用了代理才能下载  把它放在Github上   方便下载  

[点我下载哦哦哦](https://github.com/Ashtray/SymbolicExecution/blob/master/antlr-4.4-complete.jar)   
	
--------------------

[个人主页](http://Ashtray.github.io)

----------

	「你还是一个人吗」
	「难道我回变成一条狗吗」  

>「汪汪汪」

-----------------
    
 
